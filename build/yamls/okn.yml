# yaml template for OKN
# Right config parameters and OKN Docker image must be specified.
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: okn-config
  namespace: kube-system
data:
  okn-agent.conf: |
    # Name of the OpenVSwitch bridge okn-agent will create and use.
    # Make sure it doesn't conflict with your existing OpenVSwitch bridges.
    #ovsBridge: br-int

    # Name of the interface okn-agent will create and use for host <--> pod communication.
    # Make sure it doesn't conflict with your existing interfaces.
    #hostGateway: gw0

    # Encapsulation mode for communication between Pods across Nodes, supported values:
    # - vxlan (default)
    # - geneve
    #tunnelType: vxlan
  okn-cni.conf: |
    {
      "cniVersion":"0.3.0",
      "name": "okn",
      "type": "okn",
      "ipam": {
        "type": "host-local"
      }
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: okn-agent
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: okn-agent
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
      - watch
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: okn-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: okn-agent
subjects:
  - kind: ServiceAccount
    name: okn-agent
    namespace: kube-system
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: okn-agent
  namespace: kube-system
  labels:
    app: okn
    tier: node
    component: okn-agent
spec:
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: okn
        tier: node
        component: okn-agent
    spec:
      hostNetwork: true
      tolerations:
        - operator: Exists
          effect: NoSchedule
      serviceAccountName: okn-agent
      initContainers:
        - name: install-cni
          image: okn-ubuntu
          imagePullPolicy: IfNotPresent
          command: ["install_cni"]
          volumeMounts:
          - name: okn-config
            mountPath: /etc/okn/okn-cni.conf
            subPath: okn-cni.conf
            readOnly: true
          - name: host-cni-conf
            mountPath: /host/etc/cni/net.d
          - name: host-cni-bin
            mountPath: /host/opt/cni/bin
      containers:
        - name: okn-agent
          image: okn-ubuntu
          imagePullPolicy: IfNotPresent
          command: ["okn-agent"]
          args: ["--config", "/etc/okn/okn-agent.conf"]
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - check_pod_liveness agent
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            failureThreshold: 5
          securityContext:
            # okn-agent needs to manipulate /proc/sys/net/ipv4/conf/XXX/send_redirects"
            privileged: true
          volumeMounts:
          - name: okn-config
            mountPath: /etc/okn/okn-agent.conf
            subPath: okn-agent.conf
            readOnly: true
          - name: host-var-run-okn
            mountPath: /var/run/okn
          - name: openvswitch
            mountPath: /var/run/openvswitch
          # The host's /proc directory needs to be mounted in the container so that the network
          # namespace path can be opened and the container interface can be created by okn-agent in
          # that namespace.
          - name: host-proc
            mountPath: /host/proc
            readOnly: true
        - name: okn-ovs
          image: okn-ubuntu
          imagePullPolicy: IfNotPresent
          command: ["start_ovs"]
          securityContext:
            # capabilities required by OVS daemons
            capabilities:
              add:
                - SYS_NICE
                - NET_ADMIN
                - SYS_ADMIN
                - SYS_MODULE
                - IPC_LOCK
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - timeout 5 check_pod_liveness ovs
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
          - name: openvswitch
            mountPath: /var/run/openvswitch
          - name: host-var-log-okn
            mountPath: /var/log/openvswitch
            subPath: openvswitch
      volumes:
        - name: okn-config
          configMap:
            name: okn-config
        - name: openvswitch
          hostPath:
            path: /var/run/openvswitch
        - name: host-cni-conf
          hostPath:
            path: /etc/cni/net.d
        - name: host-cni-bin
          hostPath:
            path: /opt/cni/bin
        - name: host-var-run-okn
          hostPath:
            path: /var/run/okn
        - name: host-proc
          hostPath:
            path: /proc
        - name: host-var-log-okn
          hostPath:
            path: /var/log/okn
            # we use subPath to create logging subdirectories for different component (e.g. OVS) and
            # subPath requires the base volume to exist
            type: DirectoryOrCreate
