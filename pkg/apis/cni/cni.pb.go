// Code generated by protoc-gen-go. DO NOT EDIT.
// source: apis/cni/cni.proto

package cnimsg

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CniCmdResponseMessage_ErrorCode int32

const (
	CniCmdResponseMessage_SUCCESS                           CniCmdResponseMessage_ErrorCode = 0
	CniCmdResponseMessage_INCOMPATIBLE_CNI_VERSION          CniCmdResponseMessage_ErrorCode = 1
	CniCmdResponseMessage_UNSUPPORTED_NETWORK_CONFIGURATION CniCmdResponseMessage_ErrorCode = 2
	CniCmdResponseMessage_UNKNOWN_CONTAINER                 CniCmdResponseMessage_ErrorCode = 3
	CniCmdResponseMessage_TRY_AGAIN_LATER                   CniCmdResponseMessage_ErrorCode = 11
	CniCmdResponseMessage_INCOMPATIBLE_PROTO_VERSION        CniCmdResponseMessage_ErrorCode = 100
)

var CniCmdResponseMessage_ErrorCode_name = map[int32]string{
	0:   "SUCCESS",
	1:   "INCOMPATIBLE_CNI_VERSION",
	2:   "UNSUPPORTED_NETWORK_CONFIGURATION",
	3:   "UNKNOWN_CONTAINER",
	11:  "TRY_AGAIN_LATER",
	100: "INCOMPATIBLE_PROTO_VERSION",
}

var CniCmdResponseMessage_ErrorCode_value = map[string]int32{
	"SUCCESS":                           0,
	"INCOMPATIBLE_CNI_VERSION":          1,
	"UNSUPPORTED_NETWORK_CONFIGURATION": 2,
	"UNKNOWN_CONTAINER":                 3,
	"TRY_AGAIN_LATER":                   11,
	"INCOMPATIBLE_PROTO_VERSION":        100,
}

func (x CniCmdResponseMessage_ErrorCode) String() string {
	return proto.EnumName(CniCmdResponseMessage_ErrorCode_name, int32(x))
}

func (CniCmdResponseMessage_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d1df82b94f75833f, []int{2, 0}
}

type CniCmdArgsMessage struct {
	ContainerId          string   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Netns                string   `protobuf:"bytes,2,opt,name=netns,proto3" json:"netns,omitempty"`
	Ifname               string   `protobuf:"bytes,3,opt,name=ifname,proto3" json:"ifname,omitempty"`
	Args                 string   `protobuf:"bytes,4,opt,name=args,proto3" json:"args,omitempty"`
	Path                 string   `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	NetworkConfiguration []byte   `protobuf:"bytes,6,opt,name=network_configuration,json=networkConfiguration,proto3" json:"network_configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CniCmdArgsMessage) Reset()         { *m = CniCmdArgsMessage{} }
func (m *CniCmdArgsMessage) String() string { return proto.CompactTextString(m) }
func (*CniCmdArgsMessage) ProtoMessage()    {}
func (*CniCmdArgsMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1df82b94f75833f, []int{0}
}

func (m *CniCmdArgsMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CniCmdArgsMessage.Unmarshal(m, b)
}
func (m *CniCmdArgsMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CniCmdArgsMessage.Marshal(b, m, deterministic)
}
func (m *CniCmdArgsMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CniCmdArgsMessage.Merge(m, src)
}
func (m *CniCmdArgsMessage) XXX_Size() int {
	return xxx_messageInfo_CniCmdArgsMessage.Size(m)
}
func (m *CniCmdArgsMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CniCmdArgsMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CniCmdArgsMessage proto.InternalMessageInfo

func (m *CniCmdArgsMessage) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *CniCmdArgsMessage) GetNetns() string {
	if m != nil {
		return m.Netns
	}
	return ""
}

func (m *CniCmdArgsMessage) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

func (m *CniCmdArgsMessage) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *CniCmdArgsMessage) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CniCmdArgsMessage) GetNetworkConfiguration() []byte {
	if m != nil {
		return m.NetworkConfiguration
	}
	return nil
}

type CniCmdRequestMessage struct {
	Version              string             `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	CniArgs              *CniCmdArgsMessage `protobuf:"bytes,2,opt,name=cni_args,json=cniArgs,proto3" json:"cni_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CniCmdRequestMessage) Reset()         { *m = CniCmdRequestMessage{} }
func (m *CniCmdRequestMessage) String() string { return proto.CompactTextString(m) }
func (*CniCmdRequestMessage) ProtoMessage()    {}
func (*CniCmdRequestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1df82b94f75833f, []int{1}
}

func (m *CniCmdRequestMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CniCmdRequestMessage.Unmarshal(m, b)
}
func (m *CniCmdRequestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CniCmdRequestMessage.Marshal(b, m, deterministic)
}
func (m *CniCmdRequestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CniCmdRequestMessage.Merge(m, src)
}
func (m *CniCmdRequestMessage) XXX_Size() int {
	return xxx_messageInfo_CniCmdRequestMessage.Size(m)
}
func (m *CniCmdRequestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CniCmdRequestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CniCmdRequestMessage proto.InternalMessageInfo

func (m *CniCmdRequestMessage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CniCmdRequestMessage) GetCniArgs() *CniCmdArgsMessage {
	if m != nil {
		return m.CniArgs
	}
	return nil
}

type CniCmdResponseMessage struct {
	Version              string                          `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	StatusCode           CniCmdResponseMessage_ErrorCode `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3,enum=cnimsg.CniCmdResponseMessage_ErrorCode" json:"status_code,omitempty"`
	CniResult            []byte                          `protobuf:"bytes,3,opt,name=cni_result,json=cniResult,proto3" json:"cni_result,omitempty"`
	ErrorMessage         string                          `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CniCmdResponseMessage) Reset()         { *m = CniCmdResponseMessage{} }
func (m *CniCmdResponseMessage) String() string { return proto.CompactTextString(m) }
func (*CniCmdResponseMessage) ProtoMessage()    {}
func (*CniCmdResponseMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1df82b94f75833f, []int{2}
}

func (m *CniCmdResponseMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CniCmdResponseMessage.Unmarshal(m, b)
}
func (m *CniCmdResponseMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CniCmdResponseMessage.Marshal(b, m, deterministic)
}
func (m *CniCmdResponseMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CniCmdResponseMessage.Merge(m, src)
}
func (m *CniCmdResponseMessage) XXX_Size() int {
	return xxx_messageInfo_CniCmdResponseMessage.Size(m)
}
func (m *CniCmdResponseMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CniCmdResponseMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CniCmdResponseMessage proto.InternalMessageInfo

func (m *CniCmdResponseMessage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CniCmdResponseMessage) GetStatusCode() CniCmdResponseMessage_ErrorCode {
	if m != nil {
		return m.StatusCode
	}
	return CniCmdResponseMessage_SUCCESS
}

func (m *CniCmdResponseMessage) GetCniResult() []byte {
	if m != nil {
		return m.CniResult
	}
	return nil
}

func (m *CniCmdResponseMessage) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterEnum("cnimsg.CniCmdResponseMessage_ErrorCode", CniCmdResponseMessage_ErrorCode_name, CniCmdResponseMessage_ErrorCode_value)
	proto.RegisterType((*CniCmdArgsMessage)(nil), "cnimsg.CniCmdArgsMessage")
	proto.RegisterType((*CniCmdRequestMessage)(nil), "cnimsg.CniCmdRequestMessage")
	proto.RegisterType((*CniCmdResponseMessage)(nil), "cnimsg.CniCmdResponseMessage")
}

func init() { proto.RegisterFile("apis/cni/cni.proto", fileDescriptor_d1df82b94f75833f) }

var fileDescriptor_d1df82b94f75833f = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xd1, 0x6e, 0xd3, 0x4a,
	0x10, 0xad, 0x93, 0x36, 0x69, 0x26, 0xb9, 0x97, 0x74, 0x48, 0x90, 0xa9, 0x5a, 0xd4, 0x06, 0x21,
	0xfa, 0x14, 0xa4, 0x94, 0x1f, 0x30, 0x5b, 0x13, 0xac, 0xb6, 0xeb, 0x68, 0xe3, 0x50, 0xf1, 0xb4,
	0x32, 0xf6, 0x26, 0x5d, 0xb5, 0x59, 0x87, 0x5d, 0x07, 0xbe, 0x89, 0xcf, 0xe0, 0x57, 0x78, 0xe5,
	0x27, 0xd0, 0xda, 0x49, 0xd4, 0x16, 0x09, 0x1e, 0xfa, 0x60, 0x69, 0xe6, 0x8c, 0xe7, 0x9c, 0x99,
	0x33, 0x5a, 0xc0, 0x78, 0x21, 0xcd, 0x9b, 0x44, 0x49, 0xfb, 0xf5, 0x17, 0x3a, 0xcb, 0x33, 0xac,
	0x25, 0x4a, 0xce, 0xcd, 0xac, 0xf7, 0xc3, 0x81, 0x3d, 0xa2, 0x24, 0x99, 0xa7, 0x9e, 0x9e, 0x99,
	0x4b, 0x61, 0x4c, 0x3c, 0x13, 0x78, 0x0c, 0xad, 0x24, 0x53, 0x79, 0x2c, 0x95, 0xd0, 0x5c, 0xa6,
	0xae, 0x73, 0xe4, 0x9c, 0x34, 0x58, 0x73, 0x83, 0x05, 0x29, 0x76, 0x60, 0x47, 0x89, 0x5c, 0x19,
	0xb7, 0x52, 0xd4, 0xca, 0x04, 0x9f, 0x41, 0x4d, 0x4e, 0x55, 0x3c, 0x17, 0x6e, 0xb5, 0x80, 0x57,
	0x19, 0x22, 0x6c, 0xc7, 0x7a, 0x66, 0xdc, 0xed, 0x02, 0x2d, 0x62, 0x8b, 0x2d, 0xe2, 0xfc, 0xda,
	0xdd, 0x29, 0x31, 0x1b, 0xe3, 0x29, 0x74, 0x95, 0xc8, 0xbf, 0x65, 0xfa, 0x86, 0x27, 0x99, 0x9a,
	0xca, 0xd9, 0x52, 0xc7, 0xb9, 0xcc, 0x94, 0x5b, 0x3b, 0x72, 0x4e, 0x5a, 0xac, 0xb3, 0x2a, 0x92,
	0xbb, 0xb5, 0xde, 0x14, 0x3a, 0xe5, 0x0a, 0x4c, 0x7c, 0x59, 0x0a, 0x93, 0xaf, 0xb7, 0x70, 0xa1,
	0xfe, 0x55, 0x68, 0x63, 0xdb, 0xcb, 0x05, 0xd6, 0x29, 0xbe, 0x85, 0xdd, 0x44, 0x49, 0x5e, 0x8c,
	0x64, 0xe7, 0x6f, 0x0e, 0x9e, 0xf7, 0x4b, 0x43, 0xfa, 0x7f, 0x98, 0xc1, 0xea, 0x89, 0x92, 0x36,
	0xef, 0xfd, 0xaa, 0x40, 0x77, 0x2d, 0x64, 0x16, 0x99, 0x32, 0xe2, 0xdf, 0x4a, 0x1f, 0xa0, 0x69,
	0xf2, 0x38, 0x5f, 0x1a, 0x9e, 0x64, 0xa9, 0x28, 0xc4, 0xfe, 0x1f, 0xbc, 0xbe, 0x2f, 0xf6, 0x80,
	0xad, 0xef, 0x6b, 0x9d, 0x69, 0x92, 0xa5, 0x82, 0x41, 0xd9, 0x6b, 0x63, 0x3c, 0x04, 0xb0, 0x33,
	0x6b, 0x61, 0x96, 0xb7, 0x79, 0x61, 0x6f, 0x8b, 0x35, 0x12, 0x25, 0x59, 0x01, 0xe0, 0x4b, 0xf8,
	0x4f, 0xd8, 0x3e, 0x3e, 0x2f, 0x59, 0x56, 0x56, 0xb7, 0x0a, 0x70, 0xc5, 0xdc, 0xfb, 0xee, 0x40,
	0x63, 0xc3, 0x8e, 0x4d, 0xa8, 0x8f, 0x27, 0x84, 0xf8, 0xe3, 0x71, 0x7b, 0x0b, 0x0f, 0xc0, 0x0d,
	0x28, 0x09, 0x2f, 0x47, 0x5e, 0x14, 0xbc, 0xbb, 0xf0, 0x39, 0xa1, 0x01, 0xff, 0xe8, 0xb3, 0x71,
	0x10, 0xd2, 0xb6, 0x83, 0xaf, 0xe0, 0x78, 0x42, 0xc7, 0x93, 0xd1, 0x28, 0x64, 0x91, 0x7f, 0xc6,
	0xa9, 0x1f, 0x5d, 0x85, 0xec, 0x9c, 0x93, 0x90, 0xbe, 0x0f, 0x86, 0x13, 0xe6, 0x45, 0xf6, 0xb7,
	0x0a, 0x76, 0x61, 0x6f, 0x42, 0xcf, 0x69, 0x78, 0x45, 0x6d, 0x29, 0xf2, 0x02, 0xea, 0xb3, 0x76,
	0x15, 0x9f, 0xc2, 0x93, 0x88, 0x7d, 0xe2, 0xde, 0xd0, 0x0b, 0x28, 0xbf, 0xf0, 0x22, 0x9f, 0xb5,
	0x9b, 0xf8, 0x02, 0xf6, 0xef, 0x09, 0x8e, 0x58, 0x18, 0x85, 0x1b, 0xc9, 0x74, 0xf0, 0xd3, 0x81,
	0x2a, 0x51, 0x12, 0x87, 0x50, 0xb3, 0x07, 0x49, 0x53, 0x3c, 0x78, 0x68, 0xdb, 0xdd, 0x6b, 0xef,
	0x1f, 0xfe, 0xd5, 0xd4, 0xde, 0x16, 0x06, 0xb0, 0x4b, 0xe6, 0x29, 0xb9, 0x16, 0xc9, 0xcd, 0x63,
	0xa9, 0xca, 0x99, 0xce, 0xc4, 0xed, 0x23, 0x89, 0x3e, 0xd7, 0x8a, 0xd7, 0x78, 0xfa, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0xf0, 0x19, 0xca, 0x10, 0xa3, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CniClient is the client API for Cni service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CniClient interface {
	CmdAdd(ctx context.Context, in *CniCmdRequestMessage, opts ...grpc.CallOption) (*CniCmdResponseMessage, error)
	CmdCheck(ctx context.Context, in *CniCmdRequestMessage, opts ...grpc.CallOption) (*CniCmdResponseMessage, error)
	CmdDel(ctx context.Context, in *CniCmdRequestMessage, opts ...grpc.CallOption) (*CniCmdResponseMessage, error)
}

type cniClient struct {
	cc *grpc.ClientConn
}

func NewCniClient(cc *grpc.ClientConn) CniClient {
	return &cniClient{cc}
}

func (c *cniClient) CmdAdd(ctx context.Context, in *CniCmdRequestMessage, opts ...grpc.CallOption) (*CniCmdResponseMessage, error) {
	out := new(CniCmdResponseMessage)
	err := c.cc.Invoke(ctx, "/cnimsg.Cni/CmdAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cniClient) CmdCheck(ctx context.Context, in *CniCmdRequestMessage, opts ...grpc.CallOption) (*CniCmdResponseMessage, error) {
	out := new(CniCmdResponseMessage)
	err := c.cc.Invoke(ctx, "/cnimsg.Cni/CmdCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cniClient) CmdDel(ctx context.Context, in *CniCmdRequestMessage, opts ...grpc.CallOption) (*CniCmdResponseMessage, error) {
	out := new(CniCmdResponseMessage)
	err := c.cc.Invoke(ctx, "/cnimsg.Cni/CmdDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CniServer is the server API for Cni service.
type CniServer interface {
	CmdAdd(context.Context, *CniCmdRequestMessage) (*CniCmdResponseMessage, error)
	CmdCheck(context.Context, *CniCmdRequestMessage) (*CniCmdResponseMessage, error)
	CmdDel(context.Context, *CniCmdRequestMessage) (*CniCmdResponseMessage, error)
}

func RegisterCniServer(s *grpc.Server, srv CniServer) {
	s.RegisterService(&_Cni_serviceDesc, srv)
}

func _Cni_CmdAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CniCmdRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CniServer).CmdAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnimsg.Cni/CmdAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CniServer).CmdAdd(ctx, req.(*CniCmdRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cni_CmdCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CniCmdRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CniServer).CmdCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnimsg.Cni/CmdCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CniServer).CmdCheck(ctx, req.(*CniCmdRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cni_CmdDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CniCmdRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CniServer).CmdDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cnimsg.Cni/CmdDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CniServer).CmdDel(ctx, req.(*CniCmdRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cni_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cnimsg.Cni",
	HandlerType: (*CniServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CmdAdd",
			Handler:    _Cni_CmdAdd_Handler,
		},
		{
			MethodName: "CmdCheck",
			Handler:    _Cni_CmdCheck_Handler,
		},
		{
			MethodName: "CmdDel",
			Handler:    _Cni_CmdDel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/cni/cni.proto",
}
