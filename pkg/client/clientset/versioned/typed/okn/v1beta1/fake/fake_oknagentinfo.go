/*
Copyright 2019 OKN Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1beta1 "okn/pkg/apis/clusterinformation/crd/okn/v1beta1"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeOKNAgentInfos implements OKNAgentInfoInterface
type FakeOKNAgentInfos struct {
	Fake *FakeClusterinformationV1beta1
}

var oknagentinfosResource = schema.GroupVersionResource{Group: "clusterinformation.crd.okn.io", Version: "v1beta1", Resource: "oknagentinfos"}

var oknagentinfosKind = schema.GroupVersionKind{Group: "clusterinformation.crd.okn.io", Version: "v1beta1", Kind: "OKNAgentInfo"}

// Get takes name of the oKNAgentInfo, and returns the corresponding oKNAgentInfo object, and an error if there is any.
func (c *FakeOKNAgentInfos) Get(name string, options v1.GetOptions) (result *v1beta1.OKNAgentInfo, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(oknagentinfosResource, name), &v1beta1.OKNAgentInfo{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.OKNAgentInfo), err
}

// List takes label and field selectors, and returns the list of OKNAgentInfos that match those selectors.
func (c *FakeOKNAgentInfos) List(opts v1.ListOptions) (result *v1beta1.OKNAgentInfoList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(oknagentinfosResource, oknagentinfosKind, opts), &v1beta1.OKNAgentInfoList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.OKNAgentInfoList{ListMeta: obj.(*v1beta1.OKNAgentInfoList).ListMeta}
	for _, item := range obj.(*v1beta1.OKNAgentInfoList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested oKNAgentInfos.
func (c *FakeOKNAgentInfos) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(oknagentinfosResource, opts))
}

// Create takes the representation of a oKNAgentInfo and creates it.  Returns the server's representation of the oKNAgentInfo, and an error, if there is any.
func (c *FakeOKNAgentInfos) Create(oKNAgentInfo *v1beta1.OKNAgentInfo) (result *v1beta1.OKNAgentInfo, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(oknagentinfosResource, oKNAgentInfo), &v1beta1.OKNAgentInfo{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.OKNAgentInfo), err
}

// Update takes the representation of a oKNAgentInfo and updates it. Returns the server's representation of the oKNAgentInfo, and an error, if there is any.
func (c *FakeOKNAgentInfos) Update(oKNAgentInfo *v1beta1.OKNAgentInfo) (result *v1beta1.OKNAgentInfo, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(oknagentinfosResource, oKNAgentInfo), &v1beta1.OKNAgentInfo{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.OKNAgentInfo), err
}

// Delete takes name of the oKNAgentInfo and deletes it. Returns an error if one occurs.
func (c *FakeOKNAgentInfos) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(oknagentinfosResource, name), &v1beta1.OKNAgentInfo{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeOKNAgentInfos) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(oknagentinfosResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1beta1.OKNAgentInfoList{})
	return err
}

// Patch applies the patch and returns the patched oKNAgentInfo.
func (c *FakeOKNAgentInfos) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.OKNAgentInfo, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(oknagentinfosResource, name, pt, data, subresources...), &v1beta1.OKNAgentInfo{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.OKNAgentInfo), err
}
