/*
Copyright 2019 OKN Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "okn/pkg/apis/clusterinformation/crd/okn/v1beta1"
	scheme "okn/pkg/client/clientset/versioned/scheme"
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// OKNAgentInfosGetter has a method to return a OKNAgentInfoInterface.
// A group's client should implement this interface.
type OKNAgentInfosGetter interface {
	OKNAgentInfos() OKNAgentInfoInterface
}

// OKNAgentInfoInterface has methods to work with OKNAgentInfo resources.
type OKNAgentInfoInterface interface {
	Create(*v1beta1.OKNAgentInfo) (*v1beta1.OKNAgentInfo, error)
	Update(*v1beta1.OKNAgentInfo) (*v1beta1.OKNAgentInfo, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1beta1.OKNAgentInfo, error)
	List(opts v1.ListOptions) (*v1beta1.OKNAgentInfoList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.OKNAgentInfo, err error)
	OKNAgentInfoExpansion
}

// oKNAgentInfos implements OKNAgentInfoInterface
type oKNAgentInfos struct {
	client rest.Interface
}

// newOKNAgentInfos returns a OKNAgentInfos
func newOKNAgentInfos(c *ClusterinformationV1beta1Client) *oKNAgentInfos {
	return &oKNAgentInfos{
		client: c.RESTClient(),
	}
}

// Get takes name of the oKNAgentInfo, and returns the corresponding oKNAgentInfo object, and an error if there is any.
func (c *oKNAgentInfos) Get(name string, options v1.GetOptions) (result *v1beta1.OKNAgentInfo, err error) {
	result = &v1beta1.OKNAgentInfo{}
	err = c.client.Get().
		Resource("oknagentinfos").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of OKNAgentInfos that match those selectors.
func (c *oKNAgentInfos) List(opts v1.ListOptions) (result *v1beta1.OKNAgentInfoList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1beta1.OKNAgentInfoList{}
	err = c.client.Get().
		Resource("oknagentinfos").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested oKNAgentInfos.
func (c *oKNAgentInfos) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("oknagentinfos").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a oKNAgentInfo and creates it.  Returns the server's representation of the oKNAgentInfo, and an error, if there is any.
func (c *oKNAgentInfos) Create(oKNAgentInfo *v1beta1.OKNAgentInfo) (result *v1beta1.OKNAgentInfo, err error) {
	result = &v1beta1.OKNAgentInfo{}
	err = c.client.Post().
		Resource("oknagentinfos").
		Body(oKNAgentInfo).
		Do().
		Into(result)
	return
}

// Update takes the representation of a oKNAgentInfo and updates it. Returns the server's representation of the oKNAgentInfo, and an error, if there is any.
func (c *oKNAgentInfos) Update(oKNAgentInfo *v1beta1.OKNAgentInfo) (result *v1beta1.OKNAgentInfo, err error) {
	result = &v1beta1.OKNAgentInfo{}
	err = c.client.Put().
		Resource("oknagentinfos").
		Name(oKNAgentInfo.Name).
		Body(oKNAgentInfo).
		Do().
		Into(result)
	return
}

// Delete takes name of the oKNAgentInfo and deletes it. Returns an error if one occurs.
func (c *oKNAgentInfos) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("oknagentinfos").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *oKNAgentInfos) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("oknagentinfos").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched oKNAgentInfo.
func (c *oKNAgentInfos) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.OKNAgentInfo, err error) {
	result = &v1beta1.OKNAgentInfo{}
	err = c.client.Patch(pt).
		Resource("oknagentinfos").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
